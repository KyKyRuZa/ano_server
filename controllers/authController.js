const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const Admin = require('../models/Admin');
require('dotenv').config();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
console.log('üîç AuthController –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
console.log('JWT_SECRET –¥–æ—Å—Ç—É–ø–µ–Ω:', !!process.env.JWT_SECRET);
console.log('JWT_REFRESH_SECRET –¥–æ—Å—Ç—É–ø–µ–Ω:', !!process.env.JWT_REFRESH_SECRET);

// –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
function createToken(payload) {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è:', payload);
    
    if (!process.env.JWT_SECRET) {
        throw new Error('JWT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    const token = jwt.sign(payload, process.env.JWT_SECRET, {
        expiresIn: '24h'
    });
    
    console.log('‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    return token;
}

function createRefreshToken(payload) {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ refresh —Ç–æ–∫–µ–Ω–∞ –¥–ª—è:', payload);
    
    if (!process.env.JWT_REFRESH_SECRET) {
        throw new Error('JWT_REFRESH_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    const refreshToken = jwt.sign(payload, process.env.JWT_REFRESH_SECRET, {
        expiresIn: '7d'
    });
    
    console.log('‚úÖ Refresh —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    return refreshToken;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏
module.exports = {
    async login(req, res) {
        console.log('üöÄ === –ù–ê–ß–ê–õ–û –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===');
        
        try {
            const { login, password } = req.body;
            console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', { login, password: password ? '***' : '–Ω–µ—Ç' });

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!login || !password) {
                console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
                return res.status(400).json({
                    success: false,
                    error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
                });
            }

            // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...');
            const admin = await Admin.findOne({ where: { login } });
            
            if (!admin) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return res.status(401).json({
                    success: false,
                    error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
                });
            }
            
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', admin.login);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
            console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...');
            const isPasswordValid = await bcrypt.compare(password, admin.password);
            
            if (!isPasswordValid) {
                console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
                return res.status(401).json({
                    success: false,
                    error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
                });
            }
            
            console.log('‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π');

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
            console.log('üé´ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...');
            const tokenPayload = {
                id: admin.id,
                login: admin.login
            };

            const token = createToken(tokenPayload);
            const refreshToken = createRefreshToken(tokenPayload);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            const response = {
                success: true,
                message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
                token,
                refreshToken,
                admin: {
                    id: admin.id,
                    login: admin.login
                }
            };

            console.log('‚úÖ === –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===');
            res.json(response);

        } catch (error) {
            console.error('üí• === –û–®–ò–ë–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===');
            console.error('–¢–∏–ø:', error.constructor.name);
            console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
            console.error('–°—Ç–µ–∫:', error.stack);
            
            res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
                details: error.message
            });
        }
    },

    async register(req, res) {
        try {
            const { login, password } = req.body;

            if (!login || !password) {
                return res.status(400).json({
                    success: false,
                    error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
                });
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const existingAdmin = await Admin.findOne({ where: { login } });
            if (existingAdmin) {
                return res.status(400).json({
                    success: false,
                    error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                });
            }

            // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            const hashedPassword = await bcrypt.hash(password, 10);

            // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const admin = await Admin.create({
                login,
                password: hashedPassword
            });

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
            const tokenPayload = {
                id: admin.id,
                login: admin.login
            };

            const token = createToken(tokenPayload);
            const refreshToken = createRefreshToken(tokenPayload);

            res.status(201).json({
                success: true,
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
                token,
                refreshToken,
                admin: {
                    id: admin.id,
                    login: admin.login
                }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                details: error.message
            });
        }
    },

    async refreshToken(req, res) {
        try {
            const { refreshToken } = req.body;

            if (!refreshToken) {
                return res.status(400).json({
                    success: false,
                    error: 'Refresh token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
                });
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ refresh —Ç–æ–∫–µ–Ω–∞
            const decoded = jwt.verify(refreshToken, process.env.JWT_REFRESH_SECRET);
            
            const tokenPayload = {
                id: decoded.id,
                login: decoded.login
            };

            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
            const newToken = createToken(tokenPayload);
            const newRefreshToken = createRefreshToken(tokenPayload);

            res.json({
                success: true,
                token: newToken,
                refreshToken: newRefreshToken
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
            res.status(401).json({
                success: false,
                error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh token'
            });
        }
    }
};
